module Discorb
  #
  # Represents a user of discord.
  class User < Discorb::DiscordModel
    include Discorb::Messageable

    #
    # Initializes a new user.
    # @private
    #
    # @param [Discorb::Client] client The client.
    # @param [Hash] data The user data.
    def initialize: (Discorb::Client client, json data) -> void

    #
    # Format the user as `Username#Discriminator` style.
    #
    # @return [String] The formatted username.
    def to_s: () -> String

    def inspect: () -> String

    #
    # Whether the user is a owner of the client.
    # @async
    #
    # @param [Boolean] strict Whether don't allow if the user is a member of the team.
    #
    # @return [Async::Task<Boolean>] Whether the user is a owner of the client.
    def bot_owner?: (?strict: bool) -> Async::Task[bool]

    #
    # Returns the dm channel id of the user.
    # @private
    #
    # @return [Async::Task<Discorb::Snowflake>] A task that resolves to the channel id.
    def channel_id: () -> Async::Task[Discorb::Snowflake]

    #
    # Post a message to the channel.
    # @async
    #
    # @param [String] content The message content.
    # @param [Boolean] tts Whether the message is tts.
    # @param [Discorb::Embed] embed The embed to send.
    # @param [Array<Discorb::Embed>] embeds The embeds to send.
    # @param [Discorb::AllowedMentions] allowed_mentions The allowed mentions.
    # @param [Discorb::Message, Discorb::Message::Reference] reference The message to reply to.
    # @param [Array<Discorb::Component>, Array<Array<Discorb::Component>>] components The components to send.
    # @param [Discorb::Attachment] attachment The attachment to send.
    # @param [Array<Discorb::Attachment>] attachments The attachments to send.
    #
    # @return [Async::Task<Discorb::Message>] The message sent.
    def post: (
                ?String? content,
                ?tts: bool,
                ?embed: Discorb::Embed?,
                ?embeds: ::Array[Discorb::Embed]?,
                ?allowed_mentions: Discorb::AllowedMentions?,
                ?reference: (Discorb::Message | Discorb::Message::Reference)?,
                ?components: (::Array[Discorb::Component] | ::Array[::Array[Discorb::Component]])?,
                ?attachment: Discorb::Attachment?,
                ?attachments: ::Array[Discorb::Attachment]?
              ) -> Async::Task[Discorb::Message]

    #
    # Edit a message.
    # @async
    # @!macro edit
    #
    # @param [#to_s] message_id The message id.
    # @param [String] content The message content.
    # @param [Discorb::Embed] embed The embed to send.
    # @param [Array<Discorb::Embed>] embeds The embeds to send.
    # @param [Discorb::AllowedMentions] allowed_mentions The allowed mentions.
    # @param [Array<Discorb::Attachment>] attachments The new attachments.
    # @param [Array<Discorb::Component>, Array<Array<Discorb::Component>>] components The components to send.
    # @param [Boolean] supress Whether to supress embeds.
    #
    # @return [Async::Task<void>] The task.
    def edit_message: (
                        _ToS message_id,
                        ?String content,
                        ?embed: Discorb::Embed,
                        ?embeds: ::Array[Discorb::Embed],
                        ?allowed_mentions: Discorb::AllowedMentions,
                        ?attachments: ::Array[Discorb::Attachment],
                        ?components: (::Array[Discorb::Component] | ::Array[::Array[Discorb::Component]]),
                        ?supress: bool
                      ) -> Async::Task[void]

    #
    # Delete a message.
    # @async
    #
    # @param [#to_s] message_id The message id.
    # @param [String] reason The reason for deleting the message.
    #
    # @return [Async::Task<void>] The task.
    def delete_message!: (_ToS message_id, ?reason: String?) -> Async::Task[void]

    #
    # Fetch a message from ID.
    # @async
    #
    # @param [Discorb::Snowflake] id The ID of the message.
    #
    # @return [Async::Task<Discorb::Message>] The message.
    # @raise [Discorb::NotFoundError] If the message is not found.
    def fetch_message: (Discorb::Snowflake id) -> Async::Task[Discorb::Message]

    #
    # Fetch a message history.
    # @async
    #
    # @param [Integer] limit The number of messages to fetch.
    # @param [Discorb::Snowflake] before The ID of the message to fetch before.
    # @param [Discorb::Snowflake] after The ID of the message to fetch after.
    # @param [Discorb::Snowflake] around The ID of the message to fetch around.
    #
    # @return [Async::Task<Array<Discorb::Message>>] The messages.
    def fetch_messages: (
                          ?Integer limit,
                          ?before: Discorb::Snowflake?,
                          ?after: Discorb::Snowflake?,
                          ?around: Discorb::Snowflake?
                        ) -> Async::Task[::Array[Discorb::Message]]

    #
    # Fetch the pinned messages in the channel.
    # @async
    #
    # @return [Async::Task<Array<Discorb::Message>>] The pinned messages in the channel.
    def fetch_pins: () -> Async::Task[::Array[Discorb::Message]]

    #
    # Pin a message in the channel.
    # @async
    #
    # @param [Discorb::Message] message The message to pin.
    # @param [String] reason The reason of pinning the message.
    #
    # @return [Async::Task<void>] The task.
    def pin_message: (Discorb::Message message, ?reason: String?) -> Async::Task[void]

    #
    # Unpin a message in the channel.
    # @async
    #
    # @param [Discorb::Message] message The message to unpin.
    # @param [String] reason The reason of unpinning the message.
    #
    # @return [Async::Task<void>] The task.
    def unpin_message: (Discorb::Message message, ?reason: String?) -> Async::Task[void]

    #
    # Trigger the typing indicator in the channel.
    # @async
    #
    # If block is given, trigger typing indicator during executing block.
    # @example
    #   channel.typing do
    #     channel.post("Waiting for 60 seconds...")
    #     sleep 60
    #     channel.post("Done!")
    #   end
    def typing: () -> Async::Task[void]
              | [R] () { () -> R} -> R

    # @return [Boolean] Whether the user is verified.
    attr_reader verified: bool

    # @return [String] The user's username.
    attr_reader username: String

    # @return [Discorb::Snowflake] The user's ID.
    attr_reader id: Discorb::Snowflake

    # @return [Discorb::User::Flag] The user's flags.
    attr_reader flag: Discorb::User::Flag

    # @return [String] The user's discriminator.
    attr_reader discriminator: String

    # @return [Discorb::Asset] The user's avatar.
    attr_reader avatar: Discorb::Asset

    # @return [Boolean] Whether the user is a bot.
    attr_reader bot: bool

    alias bot? bot

    # @return [Time] The time the user was created.
    attr_reader created_at: Time

    # @return [String] The user's mention.
    attr_reader mention: String

    #
    # Represents the user's flags.
    # ## Flag fields
    # |`1 << 0`|`:discord_employee`|
    # |`1 << 1`|`:partnered_server_owner`|
    # |`1 << 2`|`:hypesquad_events`|
    # |`1 << 3`|`:bug_hunter_level_1`|
    # |`1 << 6`|`:house_bravery`|
    # |`1 << 7`|`:house_brilliance`|
    # |`1 << 8`|`:house_balance`|
    # |`1 << 9`|`:early_supporter`|
    # |`1 << 10`|`:team_user`|
    # |`1 << 14`|`:bug_hunter_level_2`|
    # |`1 << 16`|`:verified_bot`|
    # |`1 << 17`|`:early_verified_bot_developer`|
    # |`1 << 18`|`:discord_certified_moderator`|
    class Flag < Discorb::Flag
      attr_accessor discord_employee: bool
      attr_accessor partnered_server_owner: bool
      attr_accessor hypesquad_events: bool
      attr_accessor bug_hunter_level_1: bool
      attr_accessor house_bravery: bool
      attr_accessor house_brilliance: bool
      attr_accessor house_balance: bool
      attr_accessor early_supporter: bool
      attr_accessor team_user: bool
      attr_accessor bug_hunter_level_2: bool
      attr_accessor verified_bot: bool
      attr_accessor early_verified_bot_developer: bool
      attr_accessor discord_certified_moderato: bool
    end
  end
end