module Discorb

  #
  # Module for sending and reading messages.
  #
  module Messageable
    #
    # Returns the dm channel id of the user.
    # @private
    #
    # @return [Async::Task<Discorb::Snowflake>] A task that resolves to the channel id.
    def channel_id: () -> Async::Task[Discorb::Snowflake]

    #
    # Post a message to the channel.
    # @async
    #
    # @param [String] content The message content.
    # @param [Boolean] tts Whether the message is tts.
    # @param [Discorb::Embed] embed The embed to send.
    # @param [Array<Discorb::Embed>] embeds The embeds to send.
    # @param [Discorb::AllowedMentions] allowed_mentions The allowed mentions.
    # @param [Discorb::Message, Discorb::Message::Reference] reference The message to reply to.
    # @param [Array<Discorb::Component>, Array<Array<Discorb::Component>>] components The components to send.
    # @param [Discorb::Attachment] attachment The attachment to send.
    # @param [Array<Discorb::Attachment>] attachments The attachments to send.
    #
    # @return [Async::Task<Discorb::Message>] The message sent.
    def post: (
                ?String? content,
                ?tts: bool,
                ?embed: Discorb::Embed?,
                ?embeds: ::Array[Discorb::Embed]?,
                ?allowed_mentions: Discorb::AllowedMentions?,
                ?reference: (Discorb::Message | Discorb::Message::Reference)?,
                ?components: (::Array[Discorb::Component] | ::Array[::Array[Discorb::Component]])?,
                ?attachment: Discorb::Attachment?,
                ?attachments: ::Array[Discorb::Attachment]?
              ) -> Async::Task[Discorb::Message]

    #
    # Edit a message.
    # @async
    # @!macro edit
    #
    # @param [#to_s] message_id The message id.
    # @param [String] content The message content.
    # @param [Discorb::Embed] embed The embed to send.
    # @param [Array<Discorb::Embed>] embeds The embeds to send.
    # @param [Discorb::AllowedMentions] allowed_mentions The allowed mentions.
    # @param [Array<Discorb::Attachment>] attachments The new attachments.
    # @param [Array<Discorb::Component>, Array<Array<Discorb::Component>>] components The components to send.
    # @param [Boolean] supress Whether to supress embeds.
    #
    # @return [Async::Task<void>] The task.
    def edit_message: (
                        _ToS message_id,
                        ?String content,
                        ?embed: Discorb::Embed,
                        ?embeds: ::Array[Discorb::Embed],
                        ?allowed_mentions: Discorb::AllowedMentions,
                        ?attachments: ::Array[Discorb::Attachment],
                        ?components: (::Array[Discorb::Component] | ::Array[::Array[Discorb::Component]]),
                        ?supress: bool
                      ) -> Async::Task[void]

    #
    # Delete a message.
    # @async
    #
    # @param [#to_s] message_id The message id.
    # @param [String] reason The reason for deleting the message.
    #
    # @return [Async::Task<void>] The task.
    def delete_message!: (_ToS message_id, ?reason: String?) -> Async::Task[void]

    #
    # Fetch a message from ID.
    # @async
    #
    # @param [Discorb::Snowflake] id The ID of the message.
    #
    # @return [Async::Task<Discorb::Message>] The message.
    # @raise [Discorb::NotFoundError] If the message is not found.
    def fetch_message: (Discorb::Snowflake id) -> Async::Task[Discorb::Message]

    #
    # Fetch a message history.
    # @async
    #
    # @param [Numeric] limit The number of messages to fetch.
    # @param [Discorb::Snowflake] before The ID of the message to fetch before.
    # @param [Discorb::Snowflake] after The ID of the message to fetch after.
    # @param [Discorb::Snowflake] around The ID of the message to fetch around.
    #
    # @return [Async::Task<Array<Discorb::Message>>] The messages.
    def fetch_messages: (
                          ?Numeric limit,
                          ?before: Discorb::Snowflake?,
                          ?after: Discorb::Snowflake?,
                          ?around: Discorb::Snowflake?
                        ) -> Async::Task[::Array[Discorb::Message]]

    #
    # Fetch the pinned messages in the channel.
    # @async
    #
    # @return [Async::Task<Array<Discorb::Message>>] The pinned messages in the channel.
    def fetch_pins: () -> Async::Task[::Array[Discorb::Message]]

    #
    # Pin a message in the channel.
    # @async
    #
    # @param [Discorb::Message] message The message to pin.
    # @param [String] reason The reason of pinning the message.
    #
    # @return [Async::Task<void>] The task.
    def pin_message: (Discorb::Message message, ?reason: String?) -> Async::Task[void]

    #
    # Unpin a message in the channel.
    # @async
    #
    # @param [Discorb::Message] message The message to unpin.
    # @param [String] reason The reason of unpinning the message.
    #
    # @return [Async::Task<void>] The task.
    def unpin_message: (Discorb::Message message, ?reason: String?) -> Async::Task[void]

    #
    # Trigger the typing indicator in the channel.
    # @async
    #
    # If block is given, trigger typing indicator during executing block.
    # @example
    #   channel.typing do
    #     channel.post("Waiting for 60 seconds...")
    #     sleep 60
    #     channel.post("Done!")
    #   end
    def typing: () -> Async::Task[void]
              | [R] () { () -> R} -> R
  end
end
